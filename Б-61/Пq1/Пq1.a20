;Пq1 - первая версия - в стандарте Б-61
;основана на СП-0027 из библиотеки ИС-2
;используется 2->10, основанная на СП-0010 той же библиотеки, переписанная под стандарты Б-61

;Описание см. "Библиотека Б-61", ИТЭФ, 1965, (МИИТ, 1970) стр.61-62

;также см. Гутер Р.С., Арлазаров В.Л., Усков А.В.
;"Практика программирования", М.: Наука, 1965. - стр. 127-128,
;где в т.ч. приведен пример выдачи

;обращение:
; Я:   пв	Я+2,	Пq1,	Ω
; Я+1: k l1 l2	a1,	S+q,	an

;программа с информацией. 
;Программа берет числа из ячеек a1,a2,...,an,
;переводит их из двоичной системы в десятичную,
;используя "2->10" как подпрограмму, 
;заносит их на буфер и в зависимости от S
;выпечатвыает эти числа немедленно или нет.
;S=4000 означает "Салют", т.е. после занесения 
;на буфер всё накопленное к этому моменту на буфере
;(в том числе и занесенное раньше) напечатается
;и произойдет очистка буфера.
;Если S=0, немедленной печати не будет (если только
;не накопится на буфере слишком много материала).
;При переполнении буфера произойдет автоматический
;"салют" и очистка буфера, что может случиться и 
;в середине переноса материала на буфер. Тогда
;остаток при S=4000 будет пропечатан немедленно
;по окончании занесения, а при S=0 останется на буфере 
;в ожидании дальнейшего.
;В зависимости от значения q (0=<q=<777oct)
;указанный массив чисел выпечатывается 
;с абзацами или без них:
;если q=0, то перед массивом чисел 
;и внутри него абзацев нет;
;если q<>0, то массив печатается группами 
;по q чисел. Перед каждой группой дается абзац
;и печатается адрес первой ячейки группы.
;Печать адресов блокируется нажатием
;36dec-го разряда ДЗУ-2.
;Блокировка работы программы осуществляется
;как в программе ПП-1.

;число k l1 l2 в коде ячейки информации
;используется для блокировки печати.
;здесь k означает одну из восьмеричных цифр 1,2 или 3,
;которую мы будем считать номером ДЗУ, а l1 l2 - 
;двузначное восьмеричное число от 01 до 54,
;означающее номер разряда в этом ДЗУ.
;нажатие соответствующей клавиши блокирует
;работу программы печати, и эта программа
;передает управление сразу ячейке Я+2.

;NB! пока реализованы только обработка a1 и an
;(если a1>=an, напечатается только a1)
;Используются R1,R2,R3
;Л.Ядренников 22.05.2022

 ;Программа Пq1
	.АДРЕС 0420
	.СТАРТ 0420
 ;Считывание ячеек из программы с информацией разобрано в книге
 ;Гутер, Арлазаров, Усков "Практика программирования", 1965, стр.158
 ;надо только помнить, что в конспиративных целях в той книге
 ;переходы осуществляются по III адресу
 ;
Пq1_:	или	0 Ω конец_Пq1		;в IIa Ω находится адрес ячейки, следующей за информационной. 
	ра	(0) 0 предконец_Пq1
	см	{0vF=R1} Ω Q
Q:	.ПАМ1		;{0 V {Я+1}=R1	;R1=инф ячейка
	сдса	64 R1 R2	;R2= {k.l1.l2} αМОЗУ S+q (без модификации)
	сдса	114 R1 R1	;R1= S+q ωМОЗУ 0
	и	{0.F.0} R1 R1	;R1= 0 ωМОЗУ 0 для корректных проверок командой ВМ
	рс    	0 R2 update_ra	;РА:=αМОЗУ, в update_ra заслать 0 52 0 0 0, т.е. команду РА:=0000
				;сейчас R1=0 00 0 ωМОЗУ 0
				;       R2=0 00 {k.l1.l2} αМОЗУ S+q
call2>10:
 ;адрес исходной ячейки записан в РА и д.б. переписан в αпеч; ответ в γпеч; 2->10 портит R5,R10
	или	0 (0) αпеч
	пв	*+1 биб2>10 Ω
	ра	(0001) 0000 next_ra  ;очищаем РА и в next_ra пишем РА=РА+1
	                        ;
store_digit:
	п	γпеч 0000 R2	;<x>10->R2 или R3	;формируемая, см. *+1 и next_ra-1
	н	{0.0.1} store_digit store_digit	;подготовить следующую цифру к записи в др.регистр (R2 после R3, R3 после R2)
	и	store_digit {0.0.1} oddeven	; oddeven=0 для текущей в R3 и =1 для текущей R2
	вм	proto50 oddeven print_cmd	;сформировали команду записи: для текущей R2 запись от R2 до R2, для R3 - от R2 до R3
update_ra:
	ра	0000 0000 0000  ;формируемая (см. call2>10 -1 и *+5)	;Aмзу=РА
	вм	R1 next_ra 0000	;ω=1 если сейчас перекодировали число по адресу ωМОЗУ
	пе	0000 print_cmd 0000	;в этом случае сразу печатаем
	и	{0.0.1} store_digit oddeven	;ω=1 oddeven=0 для текущей в R3 и ω=0 oddeven=1 для текущей R2
	пу	0000 next_ra 0000	;если текущая R2, без записи на буфер перекодируем след число 
	ра	(0002) (0000) update_ra	;A'мзу=Амзу+2  ;сформировали команду обновления РА новым Амзу
	пм	0774 *+3 (0000)	;Уход при Амзу<0774 ;если текущая пара (пред. и данная) будут последними на буфере, не уходить
	ра	0000 (0000) update_ra	;сформировали команду обновления РА нулевым Амзу
	н	{0200.0.0} print_cmd print_cmd	
	н	{0200.0.0} print_cmd print_cmd	;если текущая пара (пред. и данная) не последние, уст.8 разряд УЧ в print_cmd в 1 (накапливать на буфере)
print_cmd:
	.ПАМ1	;ма	3100 (0000) R3	;формируемая, см. update_ra -1: запись очередной пары на буфер
	мб	R2 0000 0000
	пб	write_to_r2 *+1 store_digit	;след цифра пойдет в R2   	;здесь могла стоять просто пересылка!
next_ra:  
	ра	0000 0000 0000  ;формируемая, РА=РА+1 (см.call2>10 +2)	;αT+1->РА
	пу	0000 call2>10 0000  ;переход на след число, если сейчас не записывали число по адресу ωМОЗУ
предконец_Пq1:	.ПАМ1
конец_Пq1:	.ПАМ1
 ;
 ;константы и шаблоны команд Пq1
proto50:
	ма	3100 (0000) R3
write_to_r2:
	п	γпеч 0000 R2
{0200.0.0}:
	0 00 0200 0000 0000
{0vF=R1}:
	или	0 7777 R1
oddeven:	.ПАМ1
	.ФИНИШ 0420

;программа 2->10
	.АДРЕС 361
2>10_:	или	0 Ω конец_2>10
	ра	(0) 0 предконец_2>10
 
	и	αпеч {7.00.F.F.F} R5	;очистка p(10)
	у	αпеч 0.1d R10	;x 1/10
 
	у	R10 10d R10	;цикл умножений на 10
	пум	24 *-1 (1) ;LY: стоп цикла при РА >=24oct=20dec (max порядок = +-19)
 
	пм	2 * (2)  ;РА'=РА+2; при |x|>0.1 РА'=5  ;LY здесь у Шура-Бура ошибка в комменте! см.ниже
 
 ;команды циклов по РА обновляют РА 3-м адресом в любом случае, независимо от того, выполняется условие перехода или нет
 ;поэтому при |x|>10 после умножения на 0,1 условия для ПУМ в цикле x10 нет, оно пройдет один раз, РА=1,
 ;далее ПМ: первый раз условие выполнено, РА=3, второй раз не выполнено, РА=5.
 ;при 1<|x|<10 после умножения на 0,1 ПУМ: один раз условие выполняется, РА=1; второй раз не выполняется, РА=2
 ;далее ПМ: условие сразу не выполняется, РА=4
 ;при 0.1<|x|<1 условие для ПУМ выполнится 2 раза и РА=3, далее ПМ сразу не выполняется, РА=5.
 
	у	R10 0.1d R10	   ;цикл умножений на 1/10
	пен	(0) *-1 (1)  ;LY: РА-часть условия ПЕН РА>=А1 выполняется всегда, так что цикл идет только, пока число >1
 
 ;после обоих циклов получили в РА модуль дес.порядка +5, 
 ;т.е. для 1<|x|<10 РА=5, а для |х| вне этого интервала - в обе стороны увеличивается
 
	спа	(73) R5 R5	;получение p(10) порядка
 ;вычли из порядка 5 (сложение с 73 даст 100+порядок, но в СПА используются только 6 разрядов, т.ч. 0 вместо 100)
 
	пн	17 *-1 13	;получение bcd порядка
 ;BCD преобразование для порядков >9 (а РА>14dec=16oct, т.е. не меньше 0017 - A1)
 ;для них, чтобы получилось BCD, нужно к порядку в дв.форме, кот. уже в R5, прибавить 6,
 ;что реализовано как засылка в РА 13oct=11dec и вычитание 5 предыдущей командой СПА. Лихо!
 
 ;-----------------------------------------
 ;теперь в R5 правильный модуль дес.порядка в BCD, остальные разряды - исходные
 ;в R10 дес.мантисса в дв.виде в интервале 0.1...1
 
	н	R5 {1.00.0.0.0} γпеч	;знак порядка ;LY: знаки дв. и дес. порядка совпадают,
 					;но из-за особенностей представления дв.чисел в М-20 
 					;знак дв.порядка должен быть проинвертирован
	или	R10 for_round R10	;округление ;LY и отрицательный знак!
	сн	R10 {1.00.0.0.0} R10	;денормализация десятичной мантиссы
 ;для интервала 0.1..1 мантисса попадает в четыре интервала дв. порядков
 ;0.5..1; 0.25..0.5; 0.125...0.25; 0.0625...0.125.
 ;нам нужно, чтобы мантисса была для дес. порядка -1, для чего она
 ;денормализуется для дв. порядка -1. Это достигается сложением с указанным
 ;числом, где порядок как раз такой, а мантиссы нет
 ;произойдет выравнивание порядка на бОльший (на 2^-1),
 ;самое большее три сдвига. А нормализация результата отключена. 
 
 ;-------------------------
 ;теперь в R10 дв.мантисса, соотв.дес.порядку, 
 ;а в γпеч правильный знак порядка, BCD дес.порядок, остальное исходное
 ;после BCD-коррекции порядка в РА остается 0013
 
	;цикл выделения десятичных цифр (9 раз)
BCDloop: уон	R10 int10 R5	
	мрп	0 0 R10
 ;теперь в R5 в мл.разрадах очередная цифра (4 разряда), 
 ;а в R10 остальное (хвост), готовое к новым умножениям
 
	сдмп	10d γпеч γпеч	
 ;10d имеет дв.порядок 104, на который и надо сдвинуть влево мантиссу для подготовки
 ;места под очередную цифру (старший 1 задает сдвиг влево,04 - 4 разр).
 ;Цифры исходной мантиссы в γпеч в каждом проходе постепенно вытесняются нулями и в итоге уйдут
 
	см	γпеч R5 γпеч	        ;снесли очередную цифру в младшие разряды γпеч
	пм	23 BCDloop (1)	;после 8 прохода цикла РА=23 (13oct+10oct) и в 9 проходе повторения не будет
 
предконец_2>10:	.ПАМ 1
конец_2>10:	.ПАМ 1
 
 ;константы 2->10
int10:     1 00	0000 0000 0012	;10 ненормализованное для умножения при выделениии BCD цифр
for_round: 2 00	0000 0000 0077
{1.00.0.0.0}: 1 00 0000 0000 0000
{7.00.F.F.F}: 7 00 7777 7777 7777


  	.НЕПЕЧАТЬ
 ;стандартные ячейки Б-61
	.АДРЕС 0007
Ω:	.ПАМ 1
	.АДРЕС 0010
R0:	.ПАМ 1
R1:	.ПАМ 1
R2:	.ПАМ 1
R3:	.ПАМ 1
R4:	.ПАМ 1
R5:	.ПАМ 1
R6:	.ПАМ 1
R7:	.ПАМ 1
R10:	.ПАМ 1
	.АДРЕС 0025
αпеч:	.ПАМ 1
γпеч:	.ПАМ 1
 
 
;константы Б-61
	.АДРЕС 0075
1/16d:  0 75 4000 0000 0000
1/8d:   =0.125
1/4d:   0 77 4000 0000 0000
1/2d:   1 00 4000 0000 0000
 
	.АДРЕС 0101
1d:	1 01 4000 0000 0000
2d:	1 02 4000 0000 0000
3d:	1 02 6000 0000 0000
4d:	1 03 4000 0000 0000
5d:	1 03 5000 0000 0000
6d:	1 03 6000 0000 0000
7d:	1 03 7000 0000 0000
8d:	1 04 4000 0000 0000
9d:	1 04 4400 0000 0000
10d:	1 04 5000 0000 0000
1/3d:	0 77 5252 5252 5253
0.1d:   =0.1
0.01d:  =0.01
0.001d:	0 67 4061 1156 4571

	.АДРЕС 0121
{0.0.1}: 0 00 0000 0000 0001
{0.1.0}: 0 00 0000 0001 0000
{0.1.1}: 0 00 0000 0001 0001
{1.0.0}: 0 00 0001 0000 0000
{1.0.1}: 0 00 0001 0000 0001
{1.1.0}: 0 00 0001 0001 0000
{1.1.1}: 0 00 0001 0001 0001

	.АДРЕС 0131
{0.0.F}: 0 00 0000 0000 7777
{0.F.0}: 0 00 0000 7777 0000
{0.F.F}: 0 00 0000 7777 7777
{F.0.0}: 0 00 7777 0000 0000
{F.0.F}: 0 00 7777 0000 7777
{F.F.0}: 0 00 7777 7777 0000
{F.F.F}: 0 00 7777 7777 7777

;заголовки Б-61
	.АДРЕС 7747
биб2>10: пб	0,	2>10_,	0
	.АДРЕС 7751
Пq1:	пб	0,	Пq1_,	0
Пq2:	.ПАМ 1
	.АДРЕС 7764
А:	пб	0,	А_,	0

;эрзац-заголовок 2->10
	.АДРЕС 7624
эрз2>10: пб	0,	2>10_,	0

